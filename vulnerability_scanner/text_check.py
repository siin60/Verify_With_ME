import cloudmersive_security_api_client
from cloudmersive_security_api_client.rest import ApiException as SecurityApiException
from .utils import retry_on_exception, text_file, security_configuration

@retry_on_exception(retries=3, delay=2)
def Text_Check(text_input):  # Check text input for various threats
    api_instance = cloudmersive_security_api_client.ContentThreatDetectionApi(cloudmersive_security_api_client.ApiClient(security_configuration))
    try:
        # Check text input for Cross-Site Scripting (XSS)
        api_response_xss = api_instance.content_threat_detection_protect_xss(text_input)
        text_file(f"XSS Check: {'Ouch! Contains XSS - XSS can make a website unsafe for users.' if api_response_xss.contained_xss else 'Good news! No XSS detected - this website is safe.'}")
        print(f"XSS Check: {'Ouch! Contains XSS - XSS can make a website unsafe for users.' if api_response_xss.contained_xss else 'Good news! No XSS detected - this website is safe.'}")

        # Check text input for SQL Injection (SQLI)
        api_response_sqli = api_instance.content_threat_detection_check_sql_injection_string(text_input)
        text_file(f"SQLI Check: {'Ouch! Contains SQL Injection - SQL Injection can allow hackers to access this database.' if api_response_sqli.contained_sql_injection_attack else 'Good news! No SQL Injection detected - this database is safe.'}")
        print(f"SQLI Check: {'Ouch! Contains SQL Injection - SQL Injection can allow hackers to access this database.' if api_response_sqli.contained_sql_injection_attack else 'Good news! No SQL Injection detected - this database is safe.'}")

        # Check text input for XML External Entity (XXE) attacks
        api_response_xxe = api_instance.content_threat_detection_check_xxe(text_input)
        text_file(f"XXE Check: {'Ouch! Contains XXE - XXE can expose sensitive information.' if api_response_xxe.contained_xxe else 'Good news! No XXE detected - this information is safe.'}")
        print(f"XXE Check: {'Ouch! Contains XXE - XXE can expose sensitive information.' if api_response_xxe.contained_xxe else 'Good news! No XXE detected - this information is safe.'}")

        # Check text input for Insecure Deserialization JSON (JID)
        api_response_jid = api_instance.content_threat_detection_detect_insecure_deserialization_json_string(text_input)
        text_file(f"JID Check: {'Ouch! Contains JID - JID can allow attackers to run malicious code on this website.' if api_response_jid.contained_json_insecure_deserialization_attack else 'Good news! No JID detected - this server is safe.'}")
        print(f"JID Check: {'Ouch! Contains JID - JID can allow attackers to run malicious code on this website.' if api_response_jid.contained_json_insecure_deserialization_attack else 'Good news! No JID detected - this server is safe.'}")

    except SecurityApiException as e:
        if e.status == 401:
            text_file("Unauthorised request. Please check your API key.")
            print("Unauthorised request. Please check your API key.")
        else:
            text_file(f"Exception when calling ContentThreatDetectionApi: {e}")
            print("Exception when calling ContentThreatDetectionApi: %s\n" % e)