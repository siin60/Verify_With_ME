import time
from datetime import datetime
import cloudmersive_validate_api_client
import cloudmersive_security_api_client
from cloudmersive_validate_api_client.rest import ApiException as ValidateApiException
from cloudmersive_security_api_client.rest import ApiException as SecurityApiException

# API key
API_KEY = 'YOUR_CLOUDMERSIVE_API_KEY'

# Check for missing API key
if not API_KEY:
    print("You can get a small business API free plan that allows up to 800 API requests per month from: https://cloudmersive.com/pricing-small-business")
    exit()

# Configure API key authorization: Apikey for both validation and security APIs
validate_configuration = cloudmersive_validate_api_client.Configuration()
validate_configuration.api_key['Apikey'] = API_KEY

security_configuration = cloudmersive_security_api_client.Configuration()
security_configuration.api_key['Apikey'] = API_KEY

# Creating file name that will store results.
session_file_name = datetime.now().strftime('%Y-%m-%d %H-%M-%S') + ".txt"

def text_file(API_output):
    with open(session_file_name, 'a') as session_file:
        session_file.write(API_output + '\n')

# Retry decorator for handling service unavailability
def retry_on_exception(retries=3, delay=2, exception=Exception):
    def decorator(func):
        def wrapper(*args, **kwargs):
            attempt = 0
            current_delay = delay
            while attempt < retries:
                try:
                    return func(*args, **kwargs)
                except exception as e:
                    if isinstance(e, (ValidateApiException, SecurityApiException)) and e.status == 503:
                        print(f"Service is unavailable (503). Attempt {attempt + 1} of {retries}. Retrying in {current_delay} seconds...")
                        text_file(f"Service is unavailable (503). Attempt {attempt + 1} of {retries}. Retrying in {current_delay} seconds...")
                        time.sleep(current_delay)
                        current_delay *= 2
                        attempt += 1
                    else:
                        raise e
            print("Service is unavailable after multiple attempts. Please try again later.")
            text_file("Service is unavailable after multiple attempts. Please try again later.")
        return wrapper
    return decorator