from datetime import datetime
import cloudmersive_validate_api_client
from cloudmersive_validate_api_client.rest import ApiException as ValidateApiException
from .utils import retry_on_exception, text_file, validate_configuration

@retry_on_exception(retries=3, delay=2)
def Email_Validation(email):  # Validate an email address
    api_instance = cloudmersive_validate_api_client.EmailApi(cloudmersive_validate_api_client.ApiClient(validate_configuration))
    try:
        emailValidation_apiResponse = api_instance.email_full_validation(email)
        if emailValidation_apiResponse.is_catchall_domain:
            text_file('The email domain accepts emails at all addresses.')
            print('The email domain accepts emails at all addresses.')
        else:
            text_file('The email domain does not accept emails at all addresses.')
            print('The email domain does not accept emails at all addresses.')
        if emailValidation_apiResponse.is_disposable:
            text_file('The email address is from a disposable email provider.')
            print('The email address is from a disposable email provider.')
        else:
            text_file('The email address is not from a disposable email provider.')
            print('The email address is not from a disposable email provider.')
        if emailValidation_apiResponse.is_free_email_provider:
            text_file('The email address is from a free email provider.')
            print('The email address is from a free email provider.')
        else:
            text_file('The email address is not from a free email provider.')
            print('The email address is not from a free email provider.')
        if emailValidation_apiResponse.valid_address:
            text_file('The email address exists.')
            print('The email address exists.')
        else:
            text_file('The email address does not exist.')
            print('The email address does not exist.')
        if emailValidation_apiResponse.valid_domain:
            text_file('The domain of the email address is operational.')
            print('The domain of the email address is operational.')
        else:
            text_file('The domain of the email address does not exist.')
            print('The domain of the email address does not exist.')
        if emailValidation_apiResponse.valid_smtp:
            text_file('The email server for the email address is valid and reachable.')
            print('The email server for the email address is valid and reachable.')
        else:
            text_file('The email server for the email address is not valid or reachable.')
            print('The email server for the email address is not valid or reachable.')
        if emailValidation_apiResponse.valid_syntax:
            text_file('The email address has valid syntax.')
            print('The email address has valid syntax.')
        else:
            text_file('The email address does not have valid syntax.')
            print('The email address does not have valid syntax.')
    except ValidateApiException as e:
        if e.status == 401:
            text_file("Unauthorised request. Please check your API key.")
            print("Unauthorised request. Please check your API key.")
        elif e.status == 503:
            text_file("Service is currently unavailable. Please try again later.")
            print("Service is currently unavailable. Please try again later.")
        else:
            text_file(f"Exception when calling EmailApi->email_full_validation: {e}")
            print("Exception when calling EmailApi->email_full_validation: %s\n" % e)